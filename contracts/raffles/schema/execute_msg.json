{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "create_raffle"
      ],
      "properties": {
        "create_raffle": {
          "type": "object",
          "required": [
            "asset",
            "raffle_ticket_price"
          ],
          "properties": {
            "asset": {
              "$ref": "#/definitions/AssetInfo"
            },
            "comment": {
              "type": [
                "string",
                "null"
              ]
            },
            "max_participant_number": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "raffle_duration": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "raffle_start_timestamp": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "raffle_ticket_price": {
              "$ref": "#/definitions/AssetInfo"
            },
            "raffle_timeout": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "buy_ticket"
      ],
      "properties": {
        "buy_ticket": {
          "type": "object",
          "required": [
            "raffle_id",
            "sent_assets"
          ],
          "properties": {
            "raffle_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "sent_assets": {
              "$ref": "#/definitions/AssetInfo"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "type": "object",
          "required": [
            "amount",
            "msg",
            "sender"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "msg": {
              "$ref": "#/definitions/Binary"
            },
            "sender": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "receive_nft"
      ],
      "properties": {
        "receive_nft": {
          "type": "object",
          "required": [
            "msg",
            "sender",
            "token_id"
          ],
          "properties": {
            "msg": {
              "$ref": "#/definitions/Binary"
            },
            "sender": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "cw1155_receive_msg"
      ],
      "properties": {
        "cw1155_receive_msg": {
          "type": "object",
          "required": [
            "amount",
            "msg",
            "operator",
            "token_id"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "from": {
              "type": [
                "string",
                "null"
              ]
            },
            "msg": {
              "$ref": "#/definitions/Binary"
            },
            "operator": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim_nft"
      ],
      "properties": {
        "claim_nft": {
          "type": "object",
          "required": [
            "raffle_id"
          ],
          "properties": {
            "raffle_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_randomness"
      ],
      "properties": {
        "update_randomness": {
          "type": "object",
          "required": [
            "raffle_id",
            "randomness"
          ],
          "properties": {
            "raffle_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "randomness": {
              "$ref": "#/definitions/DrandRandomness"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "toggle_lock"
      ],
      "properties": {
        "toggle_lock": {
          "type": "object",
          "required": [
            "lock"
          ],
          "properties": {
            "lock": {
              "type": "boolean"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "renounce"
      ],
      "properties": {
        "renounce": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AssetInfo": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "cw20_coin"
          ],
          "properties": {
            "cw20_coin": {
              "$ref": "#/definitions/Cw20Coin"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cw721_coin"
          ],
          "properties": {
            "cw721_coin": {
              "$ref": "#/definitions/Cw721Coin"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cw1155_coin"
          ],
          "properties": {
            "cw1155_coin": {
              "$ref": "#/definitions/Cw1155Coin"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "coin"
          ],
          "properties": {
            "coin": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Cw1155Coin": {
      "type": "object",
      "required": [
        "address",
        "token_id",
        "value"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Cw20Coin": {
      "type": "object",
      "required": [
        "address",
        "amount"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Cw721Coin": {
      "type": "object",
      "required": [
        "address",
        "token_id"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        }
      }
    },
    "DrandRandomness": {
      "type": "object",
      "required": [
        "previous_signature",
        "round",
        "signature"
      ],
      "properties": {
        "previous_signature": {
          "$ref": "#/definitions/Binary"
        },
        "round": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "signature": {
          "$ref": "#/definitions/Binary"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
