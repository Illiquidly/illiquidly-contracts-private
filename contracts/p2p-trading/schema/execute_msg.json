{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "type": "object",
          "required": [
            "amount",
            "msg",
            "sender"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "msg": {
              "$ref": "#/definitions/Binary"
            },
            "sender": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "receive_nft"
      ],
      "properties": {
        "receive_nft": {
          "type": "object",
          "required": [
            "msg",
            "sender",
            "token_id"
          ],
          "properties": {
            "msg": {
              "$ref": "#/definitions/Binary"
            },
            "sender": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_trade"
      ],
      "properties": {
        "create_trade": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_funds_to_trade"
      ],
      "properties": {
        "add_funds_to_trade": {
          "type": "object",
          "required": [
            "trade_id"
          ],
          "properties": {
            "confirm": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "trade_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Is used by the Trader to confirm they completed their end of the trade.",
      "type": "object",
      "required": [
        "confirm_trade"
      ],
      "properties": {
        "confirm_trade": {
          "type": "object",
          "required": [
            "trade_id"
          ],
          "properties": {
            "trade_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Can be used to initiate Counter Trade, but also to add new tokens to it",
      "type": "object",
      "required": [
        "suggest_counter_trade"
      ],
      "properties": {
        "suggest_counter_trade": {
          "type": "object",
          "required": [
            "trade_id"
          ],
          "properties": {
            "confirm": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "trade_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_funds_to_counter_trade"
      ],
      "properties": {
        "add_funds_to_counter_trade": {
          "type": "object",
          "required": [
            "counter_id",
            "trade_id"
          ],
          "properties": {
            "confirm": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "counter_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "trade_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Is used by the Client to confirm they completed their end of the trade.",
      "type": "object",
      "required": [
        "confirm_counter_trade"
      ],
      "properties": {
        "confirm_counter_trade": {
          "type": "object",
          "required": [
            "counter_id",
            "trade_id"
          ],
          "properties": {
            "counter_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "trade_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Accept the Trade plain and simple, swap it up !",
      "type": "object",
      "required": [
        "accept_trade"
      ],
      "properties": {
        "accept_trade": {
          "type": "object",
          "required": [
            "counter_id",
            "trade_id"
          ],
          "properties": {
            "counter_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "trade_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Refuse the Trade plain and simple, no madam, I'm not interested in your tokens !",
      "type": "object",
      "required": [
        "refuse_trade"
      ],
      "properties": {
        "refuse_trade": {
          "type": "object",
          "required": [
            "counter_id",
            "trade_id"
          ],
          "properties": {
            "counter_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "trade_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Some parts of the traded tokens were interesting, but you can't accept the trade as is",
      "type": "object",
      "required": [
        "review_trade"
      ],
      "properties": {
        "review_trade": {
          "type": "object",
          "required": [
            "counter_id",
            "trade_id"
          ],
          "properties": {
            "counter_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "trade_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "You can Withdraw funds only at specific steps of the trade, but you're allowed to try anytime !",
      "type": "object",
      "required": [
        "withdraw_pending_funds"
      ],
      "properties": {
        "withdraw_pending_funds": {
          "type": "object",
          "properties": {
            "trade_id": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
